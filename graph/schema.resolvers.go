package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"
	"log"
	"time"
	
	"go.mongodb.org/mongo-driver/bson"

	"backoffice/graph/model"
	"backoffice/db"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	counters := r.Resolver.MongoClient.Client.Database("db").Collection("counters")

	newIndex, err := db.GetNextCollectionIndex(counters, "blogPostID")
	if err != nil {
		log.Fatalf("Error getting next sequence: %v", err)
	}

	post := &model.Post{
		ID: fmt.Sprintf("%d", newIndex),
		Published: false,
		Title: input.Title,
		Text: input.Text,
	}

	bsonPost, err := bson.Marshal(post)
	if err != nil {
		log.Fatalf("Error marshalling to BSON: %v", err)
	}
		
	collection := r.Resolver.MongoClient.Client.Database("db").Collection("blog")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	_, err = collection.InsertOne(ctx, bson.Raw(bsonPost))
	if err != nil {
		log.Fatalf("DB Insert Failed: %v", err)
	}

	return post, nil
}

// Attach is the resolver for the attach field.
func (r *mutationResolver) Attach(ctx context.Context, files []string) (string, error) {
	panic(fmt.Errorf("not implemented: Attach - attach"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	// Use MongoDB client from the Resolver struct
	collection := r.Resolver.MongoClient.Client.Database("db").Collection("blog")

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	cur, err := collection.Find(ctx, bson.D{})
	if err != nil {
		log.Fatalf("DB Lookup Failed: %v", err)
	}

	var posts []*model.Post

	defer cur.Close(ctx)
	for cur.Next(ctx) {
		var post model.Post
		if err := cur.Decode(&post); err != nil {
		  log.Fatal(err)
		}
	
		posts = append(posts, &post)
	}
	
	if err := cur.Err(); err != nil {
		log.Fatal(err)
	}

	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
